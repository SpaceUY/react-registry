{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "vite-template-docs",
  "type": "registry:block",
  "title": "Vite Template Docs",
  "author": "Jona630 https://github.com/Jona630",
  "description": "Docs for the Vite Template",
  "dependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "planetary/template/vite/README.md",
      "content": "# Vite Template Integration Guide\n\n## Overview\n\nThis Vite template provides a comprehensive foundation for React applications with pre-configured project structure, utilities, and components. The template includes commonly used development patterns and tools to accelerate project setup and maintain consistency across company projects.\n\n## Template Structure\n\n```\nsrc/\n├── environment.ts          # Environment configuration\n├── router.tsx             # Application routing configuration\n├── main.tsx               # Application entry point\n├── common/\n│   ├── components/        # Reusable UI components\n│   │   ├── error-boundary/ # Error handling components\n│   │   ├── theme-provider.tsx\n│   │   └── theme-toggle.tsx\n│   ├── constants/         # Application constants\n│   ├── helpers/          # Utility helper functions\n│   ├── hooks/            # Custom React hooks\n│   ├── layouts/          # Layout components\n│   │   ├── layout.tsx    # Main application layout\n│   │   └── auth-layout.tsx # Authentication layout\n│   ├── lib/              # External library integrations\n│   ├── services/         # API and external service integrations\n│   ├── stores/           # State management\n│   ├── types/            # TypeScript type definitions\n│   ├── utils/            # Utility functions and helpers\n│   └── views/            # Page-level components\n└── modules/\n    └── home/             # Home module\n        ├── router.tsx    # Module-specific routing\n        ├── assets/       # Module-specific assets\n        ├── components/   # Module-specific components\n        ├── hooks/        # Module-specific hooks\n        ├── types/        # Module-specific types\n        └── views/        # Module-specific views\n```\n\n## Integration Instructions\n\n### Prerequisites\n\n- Clean git working directory (recommended)\n- Node.js and package manager (npm/yarn/pnpm) installed\n- Existing Vite project or new project setup\n\n### Installation Steps\n\n1. **Backup Current Work**: Ensure your git status is clean to track changes effectively\n2. **Review Dependencies**: Check your `package.json` for conflicting dependencies\n3. **Copy Template Files**: Integrate template files into your project structure\n4. **Update Imports**: Some imports may be commented out due to missing packages\n5. **Install Dependencies**: Add any required packages to your project\n6. **Test Integration**: Verify all components and utilities work as expected\n\n## Important Considerations\n\n### Component Updates Required\n\n⚠️ **IMPORTANT**: Some components in this template are generic implementations and **must be updated** according to your current project's specific requirements, design system, and business logic. Do not use components as-is without proper review and customization.\n\n### Commented Code\n\n- Some imports and components are commented due to missing registry packages\n- Review and uncomment code after installing required dependencies\n- Update component implementations based on your project's specific needs\n\n### File Integration\n\n- **These files are intended as additions or updates to existing projects**\n- **Do not blindly replace existing files without review**\n- Merge carefully with existing code to avoid conflicts\n- Consider your project's existing architecture and conventions\n\n### Dependencies\n\n- Review utility functions and components for external dependencies\n- Install missing packages as needed\n- Update import paths to match your project structure\n\n## Usage Guidelines\n\n1. **Environment Configuration**: Update `environment.ts` with your project-specific settings\n2. **Routing Setup**: Configure `router.tsx` and module-specific routers for your application routes\n3. **Layout Integration**: Customize layout components (`layout.tsx`, `auth-layout.tsx`) to match your design\n4. **Module Structure**: Use the modular architecture pattern for organizing feature-specific code\n5. **Component Integration**: Adapt theme and UI components to your design system\n6. **Utility Functions**: Review and customize utility functions for your use cases\n7. **Type Definitions**: Extend or modify types to match your data models\n8. **State Management**: Configure stores according to your application's needs\n\n## Best Practices\n\n- Review all template files before integration\n- Maintain consistent code style with your existing project\n- Update documentation as you customize components\n- Test thoroughly after integration\n- Consider your team's coding standards and conventions\n- **Always customize components to match your project's specific requirements**\n\n## Support\n\nFor questions or issues related to this template, please refer to the development team or create an issue in the appropriate repository.\n\n---\n\n**Note**: This template is designed for developer use and should be customized based on project requirements and team standards. Components are provided as starting points and require project-specific implementation.\n",
      "type": "registry:file",
      "target": "docs/template/README-template-vite.md"
    },
    {
      "path": "planetary/template/vite/docs/README.md",
      "content": "# Documentation Requirements\n\n## Overview\n\nThis directory is where you should place your project's documentation. The following sections outline the essential documentation you should create to maintain a well-documented codebase.\n\n## Required Documentation\n\n### Core Architecture\n\nCreate these documents to explain your system design:\n\n- **`architecture.md`** - High-level system design, patterns used, and architectural decisions\n- **`project-structure.md`** - Detailed explanation of your directory organization and file purposes\n- **`modules.md`** - How your feature modules are organized and structured\n\n### Implementation Guides\n\nCreate guides for developers working on your project:\n\n- **`components.md`** - Your component development standards, patterns, and conventions\n- **`state-management.md`** - How state is managed in your application (stores, context, etc.)\n- **`routing.md`** - Your routing configuration and navigation patterns\n- **`layouts.md`** - How your layout system works and how to create new layouts\n\n### Configuration\n\nDocument your setup and configuration:\n\n- **`environment.md`** - Environment variables, configuration files, and their purposes\n- **`build.md`** - Build process, deployment configuration, and build scripts\n- **`development.md`** - Local development environment setup and requirements\n\n### Features & Utilities\n\nDocument your tools and helpers:\n\n- **`utils.md`** - Utility functions, helper libraries, and their usage\n- **`hooks.md`** - Custom React hooks and their purposes\n- **`services.md`** - API integrations, external services, and data fetching patterns\n- **`error-handling.md`** - Error boundaries, error management, and debugging\n\n### Best Practices\n\nEstablish standards for your team:\n\n- **`coding-standards.md`** - Code style, conventions, and formatting rules\n- **`testing.md`** - Testing strategies, patterns, and requirements\n- **`performance.md`** - Performance optimization guidelines and monitoring\n- **`security.md`** - Security best practices, authentication, and authorization\n\n## Documentation Guidelines\n\n### File Naming\n\n- Use kebab-case: `feature-name.md`\n- Use descriptive names that clearly indicate the content\n- Group related documentation in subdirectories if needed\n\n### Content Structure\n\nEach document should include:\n\n1. **Title** - Clear, descriptive heading\n2. **Overview** - Brief description of what the document covers\n3. **Prerequisites** - Any requirements or dependencies\n4. **Main Content** - Detailed information with examples\n5. **Examples** - Code examples and use cases\n6. **Related Links** - References to other relevant documentation\n\n### Code Examples\n\n- Include TypeScript examples where applicable\n- Provide complete, runnable code snippets\n- Include both basic and advanced usage patterns\n- Add comments explaining complex logic\n\n### Maintenance\n\n- Keep documentation up-to-date with code changes\n- Review and update documentation during code reviews\n- Include last updated dates for critical documentation\n\n## Getting Started\n\n1. Start with **`architecture.md`** to document your system design\n2. Create **`project-structure.md`** to explain your file organization\n3. Add **`development.md`** for setup instructions\n4. Build out implementation guides as you develop features\n5. Establish best practices documents for team standards\n\n## Tips for Good Documentation\n\n- Write for your team's skill level and experience\n- Include practical examples and use cases\n- Keep it concise but comprehensive\n- Use diagrams when helpful (Mermaid, PlantUML, or images)\n- Link to external resources when appropriate\n- Maintain a consistent tone and style throughout\n\n---\n\n**Note**: Create documentation that serves your team's needs. Start with the essentials and expand as your project grows.\n",
      "type": "registry:file",
      "target": "docs/template/README.md"
    },
    {
      "path": "planetary/template/vite/docs/project-structure.md",
      "content": "# Project Structure\n\n## Overview\n\nThis document outlines the organization and purpose of files and directories within the `@/src` folder. The project follows a modular architecture pattern with clear separation of concerns.\n\n### Component Updates Required\n\n⚠️ **IMPORTANT**: Update this file as the project grows to prevent out of date data.\n\n## Root Structure\n\n```\n@/src/\n├── environment.ts          # Environment configuration and validation\n├── router.tsx             # Main application routing configuration\n├── main.tsx               # Application entry point\n├── common/                # Shared utilities, components, and types\n└── modules/               # Feature-specific modules\n```\n\n## Common Directory (`@/src/common/`)\n\nThe `common` directory contains shared code used across multiple modules.\n\n### Components (`@/src/common/components/`)\n\nReusable UI components and error boundaries:\n\n- **`error-boundary/`** - Error handling components\n  - `auth-layout-with-error.tsx` - Error element preserving auth layout\n  - `login-layout-with-error.tsx` - Error element preserving login layout\n  - `route-error.tsx` - Main error display component\n- **`theme-provider.tsx`** - Theme context provider (dark/light/system)\n- **`theme-toggle.tsx`** - Theme switching component (commented - requires UI library)\n\n### Lib (`@/src/common/lib/`)\n\nExternal library integrations, utilities, and services:\n\n- **`utils.ts`** - General utility functions\n  - `cn()` - Class name merging utility (clsx + tailwind-merge)\n  - `urlB64ToUint8Array()` - Base64 to Uint8Array conversion\n- **`services/`** - API and external service integrations\n  - `query.interceptor.ts` - HTTP interceptor (commented - requires setup)\n\n### Hooks (`@/src/common/hooks/`)\n\nCustom React hooks:\n\n- **`use-mobile.tsx`** - Mobile detection hook\n  - `useIsMobile()` - Returns boolean for mobile viewport detection\n\n### Layouts (`@/src/common/layouts/`)\n\nLayout components for different page types:\n\n- **`auth-layout.tsx`** - Layout for authenticated pages\n  - Includes sidebar space, auth validations, and guards\n- **`layout.tsx`** - Layout for non-authenticated pages (landing, signup)\n\n### Stores (`@/src/common/stores/`)\n\nState management stores:\n\n- **`.gitkeep`** - Placeholder for state management files\n- Add Zustand, Redux, or other state management stores here\n\n### Types (`@/src/common/types/`)\n\nTypeScript type definitions:\n\n- **`routes.ts`** - Application route constants\n  - `Routes` enum with all application routes\n\n### Utils (`@/src/common/utils/`)\n\nUtility functions and helpers:\n\n- **`api-error.ts`** - API error handling utilities\n  - `ApiError` interface and `isApiError()` type guard\n- **`constants.ts`** - Application-wide constants and enums\n  - `QUEST_IDS` - Quest identifier constants including `USER_SIGNUP`\n- **`date.ts`** - Date formatting utilities\n  - `formatDate()` - Formats dates for display\n- **`debounce.ts`** - Debounce utility function\n  - `debounce()` - Creates debounced function with cancel capability\n- **`logger.ts`** - Logging utility with PostHog integration\n  - `Logger` class with debug, info, warn, error methods\n- **`wallet.ts`** - Wallet-related utilities\n  - `parseWalletAddress()` - Formats wallet addresses for display\n\n### Views (`@/src/common/views/`)\n\nShared page-level components:\n\n- **`not-found.tsx`** - 404 page component\n  - Handles both authenticated and non-authenticated states\n\n## Modules Directory (`@/src/modules/`)\n\nFeature-specific modules following a consistent structure.\n\n### Home Module (`@/src/modules/home/`)\n\nExample module structure:\n\n- **`router.tsx`** - Module-specific routing configuration\n- **`assets/`** - Module-specific assets (images, icons, etc.)\n- **`components/`** - Module-specific UI components\n- **`hooks/`** - Module-specific custom hooks\n- **`types/`** - Module-specific TypeScript types\n- **`views/`** - Module-specific page components\n  - `home.tsx` - Main home page component\n\n## Configuration Files\n\n### Environment (`@/src/environment.ts`)\n\nEnvironment variable configuration using Zod validation:\n\n- **Port configuration** - Default port 3000\n- **Node environment** - Development/production/test\n- **Database configuration** - Connection URL and pool settings\n- **PostHog configuration** - Analytics and monitoring settings\n\n### Router (`@/src/router.tsx`)\n\nMain application routing with error handling and scroll restoration:\n\n- **Route configuration** - Combines all module routes\n- **Error handling** - Adds error boundaries to routes\n- **Scroll restoration** - Maintains scroll position on navigation\n- **Layout integration** - Applies appropriate layouts to routes\n\n## File Naming Conventions\n\n- **Components**: PascalCase (e.g., `ThemeProvider.tsx`)\n- **Hooks**: camelCase with `use` prefix (e.g., `useMobile.tsx`)\n- **Utilities**: camelCase (e.g., `api-error.ts`, `wallet.ts`, `debounce.ts`)\n- **Types**: camelCase (e.g., `routes.ts`)\n- **Constants**: UPPER_SNAKE_CASE in files (e.g., `QUEST_IDS`)\n\n## Import Aliases\n\nThe project uses the `@/src` alias for imports:\n\n```typescript\n// Instead of relative imports\nimport { Routes } from \"../../common/types/routes\";\n\n// Use alias imports\nimport { Routes } from \"@/common/types/routes\";\n```\n\n## Module Structure Pattern\n\nEach module should follow this structure:\n\n```\n@/src/modules/[module-name]/\n├── router.tsx          # Module routes\n├── assets/             # Module assets\n├── components/         # Module components\n├── hooks/              # Module hooks\n├── types/              # Module types\n└── views/              # Module views\n```\n\n## Best Practices\n\n1. **Keep common code in `@/src/common/`** - Avoid duplicating shared functionality\n2. **Use module structure for features** - Organize feature-specific code in modules\n3. **Follow naming conventions** - Maintain consistent file and folder naming\n4. **Use TypeScript** - All files should have proper type definitions\n5. **Document complex utilities** - Add JSDoc comments for helper functions\n6. **Keep components focused** - Each component should have a single responsibility\n\n## Adding New Modules\n\nTo add a new module:\n\n1. Create a new directory in `@/src/modules/[module-name]/`\n2. Follow the standard module structure\n3. Create a `router.tsx` file for module routes\n4. Add module routes to the main router configuration\n5. Update this documentation with the new module structure\n",
      "type": "registry:file",
      "target": "docs/template/project-structure.md"
    }
  ]
}