{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "posthog",
  "type": "registry:block",
  "title": "Posthog analytics",
  "author": "Jona630 https://github.com/Jona630",
  "description": "Posthog analytics",
  "dependencies": [
    "posthog-js"
  ],
  "registryDependencies": [],
  "files": [
    {
      "path": "planetary/template/vite/src/common/lib/posthog.tsx",
      "content": "import { usePostHog } from \"posthog-js/react\";\n\n/**\n * Custom PostHog hook that provides a simplified interface for common analytics operations.\n *\n * This hook wraps the PostHog React SDK and provides three main functions:\n * - `identify`: Associate a user with their properties\n * - `capture`: Track custom events with properties\n * - `reset`: Clear the current user's identity\n *\n * @returns {Object} An object containing PostHog utility functions\n * @returns {Function} returns.identify - Function to identify users\n * @returns {Function} returns.capture - Function to capture events\n * @returns {Function} returns.reset - Function to reset user identity\n *\n * @example\n * ```tsx\n * function MyComponent() {\n *   const posthog = usePostHogAnalytics();\n *\n *   const handleLogin = (userId: string) => {\n *     posthog.identify(userId, { plan: 'premium' });\n *   };\n *\n *   const handlePurchase = () => {\n *     posthog.capture('purchase_completed', { amount: 99.99 });\n *   };\n * }\n * ```\n */\nexport default function usePostHogAnalytics() {\n  const posthog = usePostHog();\n\n  /**\n   * Associates a user with their unique identifier and optional properties.\n   *\n   * This function should be called when you know who the user is (e.g., after login).\n   * It will link all future events to this user ID and set their properties.\n   *\n   * @param {string} userId - The unique identifier for the user (e.g., email, database ID)\n   * @param {Record<string, unknown>} [userProperties={}] - Optional properties to associate with the user\n   *\n   * @example\n   * ```tsx\n   * // Basic identification\n   * posthog.identify('user123');\n   *\n   * // With user properties\n   * posthog.identify('user123', {\n   *   name: 'John Doe',\n   *   email: 'john@example.com',\n   *   plan: 'premium',\n   *   signupDate: '2024-01-15'\n   * });\n   * ```\n   */\n  const identify = (\n    userId: string,\n    userProperties: Record<string, unknown> = {}\n  ) => {\n    posthog.identify(userId, {\n      ...userProperties,\n    });\n  };\n\n  /**\n   * Captures a custom event with optional properties for analytics tracking.\n   *\n   * Use this function to track user actions, feature usage, or any other\n   * events you want to analyze in PostHog.\n   *\n   * @param {string} event - The name of the event to track (use snake_case convention)\n   * @param {Record<string, unknown>} [properties={}] - Optional properties to include with the event\n   *\n   * @example\n   * ```tsx\n   * // Simple event tracking\n   * posthog.capture('button_clicked');\n   *\n   * // Event with properties\n   * posthog.capture('purchase_completed', {\n   *   amount: 99.99,\n   *   currency: 'USD',\n   *   product_id: 'prod_123',\n   *   payment_method: 'credit_card'\n   * });\n   *\n   * // Feature usage tracking\n   * posthog.capture('feature_used', {\n   *   feature_name: 'dark_mode',\n   *   user_type: 'premium'\n   * });\n   * ```\n   */\n  const capture = (event: string, properties: Record<string, unknown> = {}) => {\n    posthog.capture(event, {\n      ...properties,\n    });\n  };\n\n  /**\n   * Resets the current user's identity and clears all associated data.\n   *\n   * This function should be called when a user logs out or when you want\n   * to stop associating events with the current user. After calling this,\n   * new events will be tracked anonymously until `identify` is called again.\n   *\n   * @example\n   * ```tsx\n   * const handleLogout = () => {\n   *   // Clear user session\n   *   clearUserSession();\n   *\n   *   // Reset PostHog identity\n   *   posthog.reset();\n   * };\n   * ```\n   */\n  const reset = () => {\n    posthog.reset();\n  };\n\n  return {\n    identify,\n    capture,\n    reset,\n  };\n}\n",
      "type": "registry:lib",
      "target": "src/common/lib/posthog.ts"
    }
  ]
}